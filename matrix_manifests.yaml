---
# Source: matrix/templates/job-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chat-matrix-secret
  labels:
    helm.sh/chart: matrix-1.0.23
    app.kubernetes.io/name: matrix
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.97.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: matrix/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: chat-postgresql
  namespace: "vip-deployments"
  labels:
    app.kubernetes.io/instance: chat
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.24
type: Opaque
data:
  postgres-password: "OEdBd1g1RzBzWQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: matrix/charts/element/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chat-element
  labels:
    helm.sh/chart: element-1.0.25
    app.kubernetes.io/name: element
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.11.51"
    app.kubernetes.io/managed-by: Helm
data:
  config.json: |
    
    {"brand":"Element","default_country_code":"GB","default_federate":true,"default_server_config":{"m.homeserver":{"base_url":"https://matrix.example.org/","server_name":"Matrix"},"m.identity_server":{"base_url":"https://vector.im"}},"default_theme":"light","disable_3pid_login":false,"disable_custom_urls":false,"disable_guests":false,"disable_login_language_selector":false,"element_call":{"brand":"Element Call","participant_limit":8,"url":"https://call.element.io"},"enable_presence_by_hs_url":{"https://matrix-client.matrix.org":false,"https://matrix.org":false},"features":{},"integrations_rest_url":"https://scalar.vector.im/api","integrations_ui_url":"https://scalar.vector.im/","integrations_widgets_urls":["https://scalar.vector.im/_matrix/integrations/v1","https://scalar.vector.im/api","https://scalar-staging.vector.im/_matrix/integrations/v1","https://scalar-staging.vector.im/api","https://scalar-staging.riot.im/scalar/api"],"jitsi":{"preferred_domain":"meet.element.io"},"map_style_url":"https://api.maptiler.com/maps/streets/style.json?key=fU3vlMsMn4Jb6dnEIFsx","room_directory":{"servers":["matrix.org"]},"setting_defaults":{"breadcrumbs":true},"show_labs_settings":false}
---
# Source: matrix/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chat-matrix
  labels:
    helm.sh/chart: matrix-1.0.23
    app.kubernetes.io/name: matrix
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.97.0"
    app.kubernetes.io/managed-by: Helm
data:
  log.yaml: |
    disable_existing_loggers: false
    formatters:
      precise:
        format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: precise
    loggers:
      synapse.storage.SQL:
        level: INFO
    root:
      handlers:
      - console
      level: INFO
    version: 1
  homeserver-defaults.yaml: |
    pid_file: /tmp/homeserver.pid
    log_config: "/etc/synapse/config/log.yaml"
    signing_key_path: "/etc/synapse/secret/signing.key"
    media_store_path: /data/media_store
    serve_server_wellknown: true
    enable_metrics: true
    listeners:
      - port: 8008
        tls: false
        type: http
        x_forwarded: true
        resources:
          - names: [client, federation]
            compress: false
      - port: 8080
        resources:
        - compress: false
          names:
          - metrics
        tls: false
        type: http
        x_forwarded: false
    database:
      name: psycopg2
      args:
        cp_min: 5
        cp_max: 10
    email:
      enable_notifs: false
    auto_join_rooms: []
    enable_registration: false
    enable_registration_without_verification: false
    trusted_key_servers:
      - server_name: "matrix.org"
    report_stats: false
  homeserver.yaml: |
    auto_join_rooms: []
    database:
      args:
        cp_max: 10
        cp_min: 5
      name: psycopg2
    email:
      app_name: Matrix
      client_base_url: https://matrix.example.org/
      enable_notifs: false
      notif_from: Matrix <matrix@example.org>
    enable_registration: false
    enable_registration_without_verification: false
    public_baseurl: https://matrix.example.org/
    report_stats: false
    server_name: example.org
    trusted_key_servers:
    - server_name: matrix.org
    web_client_location: https://matrix.example.org/
---
# Source: matrix/templates/persistentvolumeclaim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "chat-matrix"
  labels:
    helm.sh/chart: matrix-1.0.23
    app.kubernetes.io/name: matrix
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.97.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Source: matrix/templates/job-serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: chat-matrix-secret
  labels:
    helm.sh/chart: matrix-1.0.23
    app.kubernetes.io/name: matrix
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.97.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update"]
---
# Source: matrix/templates/job-serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chat-matrix-secret
  labels:
    helm.sh/chart: matrix-1.0.23
    app.kubernetes.io/name: matrix
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.97.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chat-matrix-secret
subjects:
  - kind: ServiceAccount
    name: chat-matrix-secret
    namespace: vip-deployments
---
# Source: matrix/charts/element/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chat-element
  labels:
    helm.sh/chart: element-1.0.25
    app.kubernetes.io/name: element
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.11.51"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: element
    app.kubernetes.io/instance: chat
---
# Source: matrix/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: chat-postgresql-hl
  namespace: "vip-deployments"
  labels:
    app.kubernetes.io/instance: chat
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.24
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: chat
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: matrix/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: chat-postgresql
  namespace: "vip-deployments"
  labels:
    app.kubernetes.io/instance: chat
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.24
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: chat
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: matrix/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chat-matrix
  labels:
    helm.sh/chart: matrix-1.0.23
    app.kubernetes.io/name: matrix
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.97.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: matrix
    app.kubernetes.io/instance: chat
---
# Source: matrix/charts/element/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-element
  labels:
    helm.sh/chart: element-1.0.25
    app.kubernetes.io/name: element
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.11.51"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: element
      app.kubernetes.io/instance: chat
  template:
    metadata:
      labels:
        app.kubernetes.io/name: element
        app.kubernetes.io/instance: chat
    spec:
      securityContext:
        {}
      containers:
        - name: element
          securityContext:
            {}
          image: "ghcr.io/remram44/matrix-helm/element:1.11.51"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /usr/lib/element/config.json
              name: config
              subPath: config.json
              readOnly: true
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: chat-element
---
# Source: matrix/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-matrix
  labels:
    helm.sh/chart: matrix-1.0.23
    app.kubernetes.io/name: matrix
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.97.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: matrix
      app.kubernetes.io/instance: chat
  template:
    metadata:
      labels:
        app.kubernetes.io/name: matrix
        app.kubernetes.io/instance: chat
    spec:
      securityContext:
        fsGroup: 2000
      containers:
        - name: matrix
          securityContext:
            runAsNonRoot: true
            runAsUser: 991
          image: "ghcr.io/matrix-org/synapse:v1.97.0"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              printf '%s' "$1" | python - || exit 1

              # Run synapse
              exec python -m synapse.app.homeserver --config-path /tmp/synapse.yaml
            - "--"
            - |
              import os
              import yaml

              # Load configuration from configmap
              with open("/etc/synapse/config/homeserver.yaml") as fp:
                  config = yaml.safe_load(fp)

              # Set default config
              with open("/etc/synapse/config/homeserver-defaults.yaml") as fp:
                  defaults = yaml.safe_load(fp)
              for k, v in defaults.items():
                  if k not in config:
                      config[k] = defaults[k]
              # Set postgres config
              assert config["database"]["name"] == "psycopg2"
              config["database"]["args"]["user"] = os.environ["PG_USER"]
              with open('/etc/synapse/postgres-password') as fp:
                  config["database"]["args"]["password"] = fp.read().strip()
              config["database"]["args"]["dbname"] = os.environ["PG_DB"]
              config["database"]["args"]["host"] = os.environ["PG_HOST"]

              def setConfig(config, key, data):
                  components = key.split('.')
                  for component in components[:-1]:
                      if isinstance(config, list):
                          component = int(component, 10)
                      config = config[component]
                  config[components[-1]] = data

              # Write final config
              os.umask(0o077)
              with open("/tmp/synapse.yaml", "w") as fp:
                  yaml.dump(config, fp)
          env:
            - name: PG_USER
              value: ""
            - name: PG_DB
              value: "matrix"
            - name: PG_HOST
              value: "chat-postgresql"
          ports:
            - name: http
              containerPort: 8008
              protocol: TCP
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/synapse/config
              name: config
            - mountPath: /etc/synapse/secret
              name: secret
            - mountPath: /etc/synapse/postgres-password
              name: postgres-password
              readOnly: true
              subPath: postgres-password
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 300
            periodSeconds: 15
            failureThreshold: 4
          readinessProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 15
            failureThreshold: 4
          resources:
            {}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "chat-matrix"
        - name: config
          configMap:
            name: chat-matrix
        - name: secret
          secret:
            secretName: "chat-matrix"
        - name: postgres-password
          secret:
            secretName: "chat-postgresql"
---
# Source: matrix/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: chat-postgresql
  namespace: "vip-deployments"
  labels:
    app.kubernetes.io/instance: chat
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.24
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: chat-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: chat
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: chat-postgresql
      labels:
        app.kubernetes.io/instance: chat
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-13.2.24
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: chat
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.1.0-debian-11-r15
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: chat-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "matrix"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=matrix" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=matrix" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "100Gi"
---
# Source: matrix/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "chat-matrix-test-connection"
  labels:
    helm.sh/chart: matrix-1.0.23
    app.kubernetes.io/name: matrix
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.97.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['chat-matrix:80']
  restartPolicy: Never
---
# Source: matrix/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: chat-matrix-secret
  labels:
    helm.sh/chart: matrix-1.0.23
    app.kubernetes.io/name: matrix
    app.kubernetes.io/instance: chat
    app.kubernetes.io/version: "1.97.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: chat-matrix-secret
      initContainers:
        # Synapse container, generating the expected values
        - name: generate
          securityContext:
            runAsNonRoot: true
            runAsUser: 991
          image: "ghcr.io/matrix-org/synapse:v1.97.0"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              mkdir -p /data/secret
              SYNAPSE_SERVER_NAME=example.org SYNAPSE_REPORT_STATS=no /start.py generate || exit 1
              cp /data/example.org.signing.key /data/secret/signing.key
              printf '%s' "$1" | python - || exit 1
            - "--"
            - |
              import os
              import yaml

              with open('/data/homeserver.yaml') as fp:
                  config = yaml.safe_load(fp)

              for key in ('form_secret', 'macaroon_secret_key', 'registration_shared_secret'):
                  with open(os.path.join('/data/secret', key), 'w') as fp:
                      fp.write(config[key])
          volumeMounts:
            - mountPath: /data
              name: data
      containers:
        # Upload container, creating the secret in Kubernetes
        - name: upload
          image: bitnami/kubectl
          command:
            - sh
            - -c
            - |
              if ! kubectl get secret "$SECRET_NAME"; then
                kubectl create secret generic "$SECRET_NAME" \
                  --from-file=/data/secret
              fi
          securityContext:
            runAsNonRoot: true
            runAsUser: 991
          env:
            - name: SECRET_NAME
              value: "chat-matrix"
          volumeMounts:
            - mountPath: /data
              name: data
      volumes:
        - name: data
          emptyDir: {}
